const _ = require("lodash");
const Markup = require("telegraf/markup");
const Extra = require("telegraf/extra");
const { TicketModel, ExaminationModel } = require("../models");
const { compileMessage, createRows } = require("../utils");

function createQuestionMessage(examinationId, ticket, questionNumber = 0) {
    const [question] = ticket.questions.splice(questionNumber, 1);
    const message = `${question.text}\n
    ${question.answers.map((answer) => answer.text).join("\n")}`;
    const buttons = question.answers.map((answer, indx) => Markup.callbackButton(
        `${indx+1} –í–∞—Ä–∏–∞–Ω—Ç`,
        `examination:${examinationId};${questionNumber};${indx}`
    ));
    const keyboard = Markup.inlineKeyboard([
        ...createRows(buttons, 2), [Markup.callbackButton("¬´–í–µ—Ä–Ω—É—Ç—å—Å—è", "backToTickets")],
    ]);

    return {
        image: question.image,
        message: compileMessage(message),
        keyboard,
    };
}

function sendQuestionMessageToUser(ctx, { image, message, keyboard } = {}) {
    if (!image)
        return ctx.replyWithHTML(message, keyboard.extra());
    if (message.length >= 200) {
        const photo = `<a href="${image}">\u{2063}</a>`;
        return ctx.replyWithHTML(photo + message, keyboard.extra());
    }

    return ctx.replyWithPhoto(image, Extra.load({ caption: message }).markup(keyboard));
}

function getAnswerStatus(ticket, questionNumber, answerNumber) {
    const { answers } = ticket.questions[Number(questionNumber)];
    return answers[Number(answerNumber)].status;
}

function checkExam(examination) {
    let success = 0;
    let wrong = 0;
    for (let answer of examination.answers) {
        if (answer.status) success += 1;
        else wrong += 1;
    }

    return { success, wrong };
}

function existQuestion(examination, questionNumber) {
    const { answers } = examination;
    return _.findIndex(answers, { question: Number(questionNumber) }) == -1 ? false : true;
}

async function updateQuestionKeyboard(ctx, ticket, questionNumber, answerNumber) {
    try {
        const question = ticket.questions[Number(questionNumber)];
        const buttons = question.answers.map((answer, indx) => {
            let icon = "";
            if (Number(answerNumber) == indx)
                icon = answer.status ? "‚úÖ" : "‚ùå";

            return Markup.callbackButton(`${indx+1} –í–∞—Ä–∏–∞–Ω—Ç ${icon}`, "answered");
        });
        const keyboard = Markup.inlineKeyboard([
            ...createRows(buttons, 2), [Markup.callbackButton("¬´–í–µ—Ä–Ω—É—Ç—å—Å—è", "backToTickets")],
        ]);

        let ok = await ctx.editMessageReplyMarkup(keyboard);
    } catch (err) {
        console.error(err);
    }

    return "ok";
}

exports.startTestAction = async(ctx) => {
    const [, ticketId] = ctx.match;
    const ticket = await TicketModel.findById(ticketId);
    if (!ticket) return ctx.answerCbQuery("–Ø –Ω–µ –Ω–∞—à–µ–ª –í–∞—à –±–∏–ª–µ—Ç :(", true).catch(console.error);
    ctx.answerCbQuery("").catch(console.error);
    // examination
    const examination = await ExaminationModel.create({
        ticket: ticket._id,
        userId: ctx.from.id,
    });
    const questionMessage = createQuestionMessage(examination._id, ticket);

    return sendQuestionMessageToUser(ctx, questionMessage);
};

exports.answerAction = async(ctx) => {
    const [, examinationId, questionNumber, answerNumber] = ctx.match;
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∏–ª–µ—Ç–∞
    const examination = await ExaminationModel
        .findById(examinationId)
        .populate("ticket");
    if (!examination) return ctx.answerCbQuery("–Ø –Ω–µ –Ω–∞—à–µ–ª –í–∞—à –±–∏–ª–µ—Ç :(", true).catch(console.error);
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä–Ω—ã–π –ª–∏ –æ—Ç–≤–µ—Ç
    const answerStatus = getAnswerStatus(examination.ticket, questionNumber, answerNumber);
    if (!answerStatus) ctx.answerCbQuery("üëé–û—Ç–≤–µ—Ç –ù–ï–≤–µ—Ä–Ω—ã–π !").catch(console.error);
    else ctx.answerCbQuery("üëç–û—Ç–≤–µ—Ç –í–µ—Ä–Ω—ã–π !").catch(console.error);
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    if (existQuestion(examination, questionNumber)) return null;
    // –æ–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await updateQuestionKeyboard(ctx, examination.ticket, questionNumber, answerNumber);
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    examination.answers.push({
        question: Number(questionNumber),
        answer: Number(answerNumber),
        status: answerStatus,
    });
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏ –Ω–∞—à —Ç–µ—Å—Ç
    const nextQuestionNumber = Number(questionNumber) + 1;
    if (examination.ticket.questions.length <= nextQuestionNumber) {
        const wrongCountAnswers = 2;
        const { wrong, success } = checkExam(examination);
        let title = "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω !";

        const buttons = [Markup.callbackButton("¬´–í–µ—Ä–Ω—É—Ç—å—Å—è", "backToTickets")];
        if (wrong > wrongCountAnswers) {
            examination.status = -1;
            title = "–í—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏ —ç–∫–∑–∞–º–µ–Ω !";
            buttons.unshift(Markup.callbackButton("–ü–µ—Ä–µ—Å–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω", `ticket:${examination.ticket._id}`));
        } else {
            examination.status = 1;
        }
        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —ç–∫–∑–∞–º–∏–Ω–µ
        await examination.save();

        // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const keyboard = Markup.inlineKeyboard(buttons, { columns: 1 });
        const message = `üëç(${success}) üëé(${wrong})\n${title}`;
        return ctx.reply(message, keyboard.extra());
    }

    await examination.save();
    // –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    const questionMessage = createQuestionMessage(examination._id, examination.ticket, nextQuestionNumber);
    return sendQuestionMessageToUser(ctx, questionMessage);
};

exports.answeredAction = (ctx) => {
    return ctx.answerCbQuery("–í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å !", true).catch(console.error);
};